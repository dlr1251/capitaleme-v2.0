---
import CLKRLayout from '../../../layouts/CLKRLayout.astro';
import CLKRConsultationForm from '../../../components/clkr/CLKRConsultationForm.tsx';
import { calculateReadingTimeFromText } from '../../../utils/readingTime';
import { getAllContentData } from '../../../server/lib/contentData.js';

export const prerender = true;

interface CLKRArticle {
  slug: string;
  title: string;
  description?: string;
  content: string;
  reading_time?: number;
  last_edited?: string;
  [key: string]: any;
}

export async function getStaticPaths() {
  try {
    const { getCLKRArticlesFromSupabase } = await import('../../../server/lib/syncNotionToSupabase.js');
    const articlesResult = await getCLKRArticlesFromSupabase('en');
    if (!Array.isArray(articlesResult)) return [];
    const validArticles = articlesResult.filter((article: CLKRArticle) =>
      article &&
      article.slug &&
      article.title &&
      article.content
    );
    return validArticles.map((article: CLKRArticle) => ({
      params: { slug: article.slug },
      props: { article }
    }));
  } catch (error) {
    return [];
  }
}

const { article } = Astro.props;

if (!article) {
  return Astro.redirect('/404');
}

const title = article.title;
const description = article.description;
const content = article.content;
const readingTime = article.reading_time || calculateReadingTimeFromText(content);

// Extract headings from content for table of contents
function extractHeadings(content: string): { id: string; text: string; depth: number }[] {
  const headings: { id: string; text: string; depth: number }[] = [];
  const lines = content.split('\n');
  
  lines.forEach((line) => {
    const headingMatch = line.match(/^(#{1,6})\s+(.+)$/);
    if (headingMatch) {
      const depth = headingMatch[1].length;
      const text = headingMatch[2].trim();
      const id = text.toLowerCase()
        .replace(/[^a-z0-9]+/g, '-')
        .replace(/(^-|-$)/g, '');
      headings.push({ id, text, depth });
    }
  });
  
  return headings;
}

const headings = extractHeadings(content);

// Optimized markdown to HTML conversion
function markdownToHtml(markdown: string): string {
  if (!markdown) return '';
  
  return markdown
    // Headings with ID generation
    .replace(/^### (.*$)/gim, (_, text) => {
      const id = text.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '');
      return `<h3 id="${id}">${text}</h3>`;
    })
    .replace(/^## (.*$)/gim, (_, text) => {
      const id = text.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '');
      return `<h2 id="${id}">${text}</h2>`;
    })
    .replace(/^# (.*$)/gim, (_, text) => {
      const id = text.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '');
      return `<h1 id="${id}">${text}</h1>`;
    })
    // Bold and italic
    .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
    .replace(/\*(.*?)\*/g, '<em>$1</em>')
    // Code blocks
    .replace(/```(\w+)?\n([\s\S]*?)```/g, '<pre><code class="language-$1">$2</code></pre>')
    .replace(/`([^`]+)`/g, '<code>$1</code>')
    // Links
    .replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2">$1</a>')
    // Images
    .replace(/!\[([^\]]*)\]\(([^)]+)\)/g, '<img src="$2" alt="$1">')
    // Lists
    .replace(/^\* (.*$)/gim, '<li>$1</li>')
    .replace(/^- (.*$)/gim, '<li>$1</li>')
    // Paragraphs (simplified)
    .replace(/\n\n+/g, '</p><p>')
    .replace(/^(?!<[h|li|pre|p]).*$/gim, '<p>$&</p>')
    // Clean up
    .replace(/<p><\/p>/g, '')
    .replace(/<p>(<h[1-6]>.*<\/h[1-6]>)<\/p>/g, '$1')
    .replace(/<p>(<li>.*<\/li>)<\/p>/g, '<ul>$1</ul>')
    .replace(/<ul><ul>/g, '<ul>')
    .replace(/<\/ul><\/ul>/g, '</ul>');
}

const htmlContent = markdownToHtml(content);

// Get menu data for the sidebar
const menuData = await getAllContentData('en');
---

<CLKRLayout 
  title={title} 
  description={description} 
  lang="en" 
  pathname={Astro.url.pathname}
  headings={headings}
  lastEdited={article.last_edited}
  readingTime={readingTime}
  menuData={menuData}
>
  <div class="prose prose-lg max-w-none">
    <div set:html={htmlContent} />
  </div>
  
  <CLKRConsultationForm 
    topic={title} 
    category="CLKR" 
    lang="en"
    client:load 
  />
</CLKRLayout>

<style>
  :global(h2, h3, h4, h5, h6) {
    scroll-margin-top: 160px;
  }
</style> 