---
import { getGuidesFromSupabase } from '../../../server/lib/syncNotionToSupabase.js';
import GuidesLayout from '../../../layouts/GuidesLayout.astro';

export const prerender = true;

interface Guide {
  id: string;
  title: string;
  slug: string;
  description: string;
  content: string;
  published?: boolean;
  last_edited?: string;
  updated_at?: string;
  author?: string;
  readingTime?: number;
  category?: string;
}

export async function getStaticPaths() {
  const guides = await getGuidesFromSupabase('en') as Guide[];
  
  return guides
    .filter((guide: Guide) => {
      return guide.title && guide.slug && guide.published !== false;
    })
    .map((guide: Guide) => {
      // Calculate reading time (rough estimate: 200 words per minute)
      const calculateReadingTime = (text: string) => {
        const words = text.split(' ').length;
        const minutes = Math.ceil(words / 200);
        return minutes;
      };

      const readingTime = calculateReadingTime(guide.content || '');
      
      return {
        params: { slug: guide.slug },
        props: { 
          guide,
          title: guide.title,
          description: guide.description,
          lastEdited: guide.last_edited || guide.updated_at,
          author: guide.author || 'Capital M Law',
          readingTime: readingTime,
          category: guide.category || 'Legal Guide'
        }
      };
    });
}

const { guide, title, description, lastEdited, author, readingTime, category } = Astro.props as { 
  guide: Guide; 
  title: string; 
  description: string;
  lastEdited?: string;
  author: string;
  readingTime: number;
  category: string;
};

if (!guide) {
  throw new Error('Guide not found');
}

const content = guide.content || '';

// Extract headings for table of contents
function extractHeadings(content: string): { id: string; text: string; depth: number }[] {
  const headings: { id: string; text: string; depth: number }[] = [];
  const lines = content.split('\n');
  
  lines.forEach((line, index) => {
    const match = line.match(/^(#{1,6})\s+(.+)$/);
    if (match) {
      const depth = match[1].length;
      const text = match[2];
      const id = text.toLowerCase().replace(/[^a-z0-9]+/g, '-');
      headings.push({ id, text, depth });
    }
  });
  
  return headings;
}

const headings = extractHeadings(content);
---

<GuidesLayout 
  title={title} 
  description={description}
  lastEdited={lastEdited}
  headings={headings}
  showBreadcrumb={true}
  lang="en"
  author={author}
  timeToRead={readingTime}
  publishedDate={lastEdited}
>
  <!-- Content -->
  <div class="prose prose-lg max-w-none prose-headings:scroll-mt-20">
    <div set:html={content} />
  </div>
</GuidesLayout>

<script>
  // Log the content when the page loads
  document.addEventListener('DOMContentLoaded', () => {
    // Content loaded
  });
</script> 