---
export const prerender = true;
import VisasLayout from '../../../layouts/VisasLayout.astro';
import { getVisasFromSupabase, getVisaBySlugFromSupabase } from '../../../server/lib/syncNotionToSupabase.js';

interface Visa {
  id: string;
  title: string;
  slug: string;
  description: string;
  content: string;
  last_edited?: string;
  updated_at?: string;
}

export async function getStaticPaths() {
  const visas = await getVisasFromSupabase('es') as Visa[];
  
  return visas.map((visa: Visa) => {
    const slug = visa.slug;
    if (!slug) {
      return null;
    }
    
    return {
      params: { slug },
      props: { visa }
    };
  }).filter(Boolean);
}

const { visa } = Astro.props as { visa: Visa };

if (!visa) {
  throw new Error('Visa not found');
}

const title = visa.title;
const description = visa.description;
const currentSlug = Astro.params.slug;

// Get menu data for the sidebar
import { getAllContentData } from '../../../server/lib/contentData.js';
const menuData = await getAllContentData('es');

// Convert content to markdown if needed
const content = visa.content || '';

// Markdown to HTML conversion (same as CLKR)
function markdownToHtml(markdown: string): string {
  if (!markdown) return '';
  return markdown
    // Headings with ID generation
    .replace(/^### (.*$)/gim, (_, text) => {
      const id = text.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '');
      return `<h3 id="${id}">${text}</h3>`;
    })
    .replace(/^## (.*$)/gim, (_, text) => {
      const id = text.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '');
      return `<h2 id="${id}">${text}</h2>`;
    })
    .replace(/^# (.*$)/gim, (_, text) => {
      const id = text.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '');
      return `<h1 id="${id}">${text}</h1>`;
    })
    // Bold and italic
    .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
    .replace(/\*(.*?)\*/g, '<em>$1</em>')
    // Code blocks
    .replace(/```(\w+)?\n([\s\S]*?)```/g, '<pre><code class="language-$1">$2</code></pre>')
    .replace(/`([^`]+)`/g, '<code>$1</code>')
    // Links
    .replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2">$1</a>')
    // Images
    .replace(/!\[([^\]]*)\]\(([^)]+)\)/g, '<img src="$2" alt="$1">')
    // Lists
    .replace(/^\* (.*$)/gim, '<li>$1</li>')
    .replace(/^- (.*$)/gim, '<li>$1</li>')
    // Paragraphs (simplified)
    .replace(/\n\n+/g, '</p><p>')
    .replace(/^(?!<[h|li|pre|p]).*$/gim, '<p>$&</p>')
    // Clean up
    .replace(/<p><\/p>/g, '')
    .replace(/<p>(<h[1-6]>.*<\/h[1-6]>)<\/p>/g, '$1')
    .replace(/<p>(<li>.*<\/li>)<\/p>/g, '<ul>$1</ul>')
    .replace(/<ul><ul>/g, '<ul>')
    .replace(/<\/ul><\/ul>/g, '</ul>');
}

const htmlContent = markdownToHtml(content);

// Extract headings for table of contents (simplified for now)
function extractHeadings(content: string): { id: string; text: string; depth: number }[] {
  const headings: { id: string; text: string; depth: number }[] = [];
  const lines = content.split('\n');
  
  lines.forEach((line, index) => {
    const match = line.match(/^(#{1,6})\s+(.+)$/);
    if (match) {
      const depth = match[1].length;
      const text = match[2];
      const id = text.toLowerCase().replace(/[^a-z0-9]+/g, '-');
      headings.push({ id, text, depth });
    }
  });
  
  return headings;
}

const headings = extractHeadings(content);
---

<VisasLayout
  title={title}
  description={description}
  lang="es"
  headings={headings}
  lastEdited={visa.last_edited || visa.updated_at}
  currentSlug={currentSlug}
  menuData={menuData}
>
  <div class="prose prose-lg max-w-none">
    <div set:html={htmlContent} />
  </div>
</VisasLayout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const tocLinks = document.querySelectorAll('.toc-link');
    const headings = document.querySelectorAll('h1, h2, h3, h4, h5, h6');
    let currentActiveLink: HTMLElement | null = null;

    // Function to update active link
    const updateActiveLink = (link: HTMLElement) => {
      if (currentActiveLink) {
        currentActiveLink.classList.remove('active');
      }
      link.classList.add('active');
      currentActiveLink = link;
    };

    // Smooth scroll with offset
    tocLinks.forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const targetId = link.getAttribute('href')?.substring(1);
        const targetElement = document.getElementById(targetId || '');
        
        if (targetElement) {
          const headerOffset = 100;
          const elementPosition = targetElement.getBoundingClientRect().top;
          const offsetPosition = elementPosition + window.pageYOffset - headerOffset;

          // Use requestAnimationFrame for smoother scrolling
          requestAnimationFrame(() => {
            window.scrollTo({
              top: offsetPosition,
              behavior: 'smooth'
            });
          });

          // Update active link after scrolling
          setTimeout(() => updateActiveLink(link as HTMLElement), 100);
        }
      });
    });

    // Intersection Observer for scroll spy
    const observerOptions = {
      root: null,
      rootMargin: '-20% 0px -80% 0px',
      threshold: [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const id = entry.target.id;
          const tocLink = document.querySelector(`.toc-link[href="#${id}"]`) as HTMLElement;
          if (tocLink) {
            updateActiveLink(tocLink);
          }
        }
      });
    }, observerOptions);

    // Observe all headings
    headings.forEach(heading => {
      if (heading.id) {
        observer.observe(heading);
      }
    });

    // Handle initial hash in URL
    const hash = window.location.hash;
    if (hash) {
      const targetId = hash.substring(1);
      const targetElement = document.getElementById(targetId);
      if (targetElement) {
        setTimeout(() => {
          const headerOffset = 100;
          const elementPosition = targetElement.getBoundingClientRect().top;
          const offsetPosition = elementPosition + window.pageYOffset - headerOffset;
          
          window.scrollTo({
            top: offsetPosition,
            behavior: 'smooth'
          });
        }, 100);
      }
    }

    // Update active link on initial load
    if (hash) {
      const initialLink = document.querySelector(`.toc-link[href="${hash}"]`) as HTMLElement;
      if (initialLink) {
        updateActiveLink(initialLink);
      }
    } else if (tocLinks.length > 0) {
      updateActiveLink(tocLinks[0] as HTMLElement);
    }
  });
</script> 