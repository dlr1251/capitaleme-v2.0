---
import CLKRLayout from '../../../layouts/CLKRLayout.astro';
import CLKRConsultationForm from '../../../components/clkr/CLKRConsultationForm.tsx';
import { calculateReadingTimeFromText } from '../../../utils/readingTime';
import { getAllContentData } from '../../../server/lib/contentData.js';

export const prerender = true;

interface CLKRArticle {
  slug: string;
  title: string;
  description?: string;
  content: string;
  reading_time?: number;
  last_edited?: string;
  [key: string]: any;
}

export async function getStaticPaths() {
  try {
    const { getCLKRArticlesFromSupabase } = await import('../../../server/lib/syncNotionToSupabase.js');
    const articlesResult = await getCLKRArticlesFromSupabase('es');
    if (!Array.isArray(articlesResult)) return [];
    return articlesResult.map((article: CLKRArticle) => ({
      params: { slug: article.slug },
      props: { article }
    }));
  } catch (error) {
    return [];
  }
}

const { article } = Astro.props;

if (!article) {
  return Astro.redirect('/404');
}

const title = article.title;
const description = article.description;
const content = article.content;
const readingTime = article.reading_time || calculateReadingTimeFromText(content);

// Extract headings from content for table of contents
function extractHeadings(content: string): { id: string; text: string; depth: number }[] {
  const headings: { id: string; text: string; depth: number }[] = [];
  const lines = content.split('\n');
  
  lines.forEach((line) => {
    const headingMatch = line.match(/^(#{1,6})\s+(.+)$/);
    if (headingMatch) {
      const depth = headingMatch[1].length;
      const text = headingMatch[2].trim();
      const id = text.toLowerCase()
        .replace(/[^a-z0-9]+/g, '-')
        .replace(/(^-|-$)/g, '');
      headings.push({ id, text, depth });
    }
  });
  
  return headings;
}

const headings = extractHeadings(content);

// Convert markdown content to HTML
function markdownToHtml(markdown: string): string {
  return markdown
    // Headings
    .replace(/^### (.*$)/gim, '<h3 id="$1">$1</h3>')
    .replace(/^## (.*$)/gim, '<h2 id="$1">$1</h2>')
    .replace(/^# (.*$)/gim, '<h1 id="$1">$1</h1>')
    // Bold
    .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
    // Italic
    .replace(/\*(.*?)\*/g, '<em>$1</em>')
    // Code blocks
    .replace(/```(\w+)?\n([\s\S]*?)```/g, '<pre><code class="language-$1">$2</code></pre>')
    // Inline code
    .replace(/`([^`]+)`/g, '<code>$1</code>')
    // Links
    .replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2">$1</a>')
    // Images
    .replace(/!\[([^\]]*)\]\(([^)]+)\)/g, '<img src="$2" alt="$1">')
    // Lists
    .replace(/^\* (.*$)/gim, '<li>$1</li>')
    .replace(/^- (.*$)/gim, '<li>$1</li>')
    // Paragraphs
    .replace(/\n\n/g, '</p><p>')
    .replace(/^(?!<[h|li|pre|p]).*$/gim, '<p>$&</p>')
    // Clean up
    .replace(/<p><\/p>/g, '')
    .replace(/<p>(<h[1-6]>.*<\/h[1-6]>)<\/p>/g, '$1')
    .replace(/<p>(<li>.*<\/li>)<\/p>/g, '<ul>$1</ul>')
    .replace(/<ul><ul>/g, '<ul>')
    .replace(/<\/ul><\/ul>/g, '</ul>');
}

const htmlContent = markdownToHtml(content);

// Get menu data for the sidebar
const menuData = await getAllContentData('es');
---

<CLKRLayout 
  title={title} 
  description={description} 
  lang="es" 
  pathname={Astro.url.pathname}
  headings={headings}
  lastEdited={article.last_edited}
  readingTime={readingTime}
  menuData={menuData}
>
  <div class="prose prose-lg max-w-none">
    <div set:html={htmlContent} />
  </div>
  
  <CLKRConsultationForm 
    topic={title} 
    category="CLKR" 
    lang="es"
    client:load 
  />
</CLKRLayout>

<style>
  /* Smooth scroll behavior for the entire page */
  html {
    scroll-behavior: smooth;
  }

  /* Ensure headings have proper scroll margin for navbar offset */
  :global(h2, h3, h4, h5, h6) {
    scroll-margin-top: 160px;
  }

  /* Table of contents link animations */
  .toc-link {
    position: relative;
    transition: all 0.2s ease-in-out;
  }

  .toc-link::before {
    content: '';
    position: absolute;
    left: -1rem;
    top: 50%;
    transform: translateY(-50%);
    width: 0.25rem;
    height: 0;
    background-color: #3b82f6;
    transition: height 0.2s ease-in-out;
    border-radius: 0.125rem;
  }

  .toc-link:hover::before,
  .toc-link.active::before {
    height: 1.5rem;
  }

  .toc-link.active {
    color: #2563eb;
    background-color: #eff6ff;
  }

  /* Fade in animation for the table of contents */
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .toc-container {
    animation: fadeIn 0.3s ease-out;
  }

  /* Line clamp utility */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  /* Prose customizations */
  .prose {
    color: #374151;
  }

  .prose h1, .prose h2, .prose h3, .prose h4, .prose h5, .prose h6 {
    color: #111827;
    font-weight: 600;
  }

  .prose h1 {
    font-size: 2.25rem;
    margin-top: 0;
    margin-bottom: 1.5rem;
  }

  .prose h2 {
    font-size: 1.875rem;
    margin-top: 2.5rem;
    margin-bottom: 1rem;
  }

  .prose h3 {
    font-size: 1.5rem;
    margin-top: 2rem;
    margin-bottom: 0.75rem;
  }

  .prose p {
    margin-top: 1.25rem;
    margin-bottom: 1.25rem;
    line-height: 1.75;
  }

  .prose ul, .prose ol {
    margin-top: 1.25rem;
    margin-bottom: 1.25rem;
  }

  .prose li {
    margin-top: 0.5rem;
    margin-bottom: 0.5rem;
  }

  .prose blockquote {
    border-left: 4px solid #3b82f6;
    padding-left: 1rem;
    margin: 1.5rem 0;
    font-style: italic;
    color: #6b7280;
  }

  .prose code {
    background-color: #f3f4f6;
    padding: 0.125rem 0.25rem;
    border-radius: 0.25rem;
    font-size: 0.875rem;
  }

  .prose pre {
    background-color: #1f2937;
    color: #f9fafb;
    padding: 1rem;
    border-radius: 0.5rem;
    overflow-x: auto;
  }

  .prose pre code {
    background-color: transparent;
    padding: 0;
    color: inherit;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const tocLinks = document.querySelectorAll('.toc-link');
    const headings = document.querySelectorAll('h1, h2, h3, h4, h5, h6');
    
    let currentActiveLink: HTMLElement | null = null;

    // Function to update active link
    const updateActiveLink = (link: HTMLElement) => {
      if (currentActiveLink) {
        currentActiveLink.classList.remove('active');
      }
      link.classList.add('active');
      currentActiveLink = link;
    };

    // Smooth scroll with offset
    tocLinks.forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const targetId = link.getAttribute('href')?.substring(1);
        const targetElement = document.getElementById(targetId || '');
        
        if (targetElement) {
          const headerOffset = 140;
          const elementPosition = targetElement.getBoundingClientRect().top;
          const offsetPosition = elementPosition + window.pageYOffset - headerOffset;

          // Use requestAnimationFrame for smoother scrolling
          requestAnimationFrame(() => {
            window.scrollTo({
              top: offsetPosition,
              behavior: 'smooth'
            });
          });

          // Update active link after scrolling
          setTimeout(() => updateActiveLink(link as HTMLElement), 100);
        }
      });
    });

    // Intersection Observer for scroll spy
    const observerOptions = {
      root: null,
      rootMargin: '-20% 0px -80% 0px',
      threshold: [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const id = entry.target.id;
          const tocLink = document.querySelector(`.toc-link[href="#${id}"]`) as HTMLElement;
          if (tocLink) {
            updateActiveLink(tocLink);
          }
        }
      });
    }, observerOptions);

    // Observe all headings
    headings.forEach(heading => {
      if (heading.id) {
        observer.observe(heading);
      }
    });

    // Handle initial hash in URL
    const hash = window.location.hash;
    if (hash) {
      const targetId = hash.substring(1);
      const targetElement = document.getElementById(targetId);
      if (targetElement) {
        setTimeout(() => {
          const headerOffset = 140;
          const elementPosition = targetElement.getBoundingClientRect().top;
          const offsetPosition = elementPosition + window.pageYOffset - headerOffset;
          
          window.scrollTo({
            top: offsetPosition,
            behavior: 'smooth'
          });
        }, 100);
      }
    }

    // Update active link on initial load
    if (hash) {
      const initialLink = document.querySelector(`.toc-link[href="${hash}"]`) as HTMLElement;
      if (initialLink) {
        updateActiveLink(initialLink);
      }
    } else if (tocLinks.length > 0) {
      updateActiveLink(tocLinks[0] as HTMLElement);
    }

    // Add mobile menu toggle functionality
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    
    if (mobileMenuButton && mobileMenu) {
      mobileMenuButton.addEventListener('click', () => {
        mobileMenu.classList.toggle('hidden');
      });
    }
  });
</script> 