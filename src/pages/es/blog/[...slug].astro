---
import BlogPostLayoutNew from '../../../layouts/BlogPostLayoutNew.astro';
import { getBlogPostsFromSupabase, getBlogPostBySlug } from '../../../lib/blogData.ts';
import SocialSharing from '../../../components/core/common/SocialSharing.jsx';

const lang = 'es';

// Utility functions
const formatDate = (dateString: string): string => {
  const date = new Date(dateString);
  return date.toLocaleDateString('es-ES', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
};

const getRelativeTime = (dateString: string): string => {
  const date = new Date(dateString);
  const now = new Date();
  const diffInMs = now.getTime() - date.getTime();
  const diffInDays = Math.floor(diffInMs / (1000 * 60 * 60 * 24));
  const diffInHours = Math.floor(diffInMs / (1000 * 60 * 60));
  const diffInMinutes = Math.floor(diffInMs / (1000 * 60));

  if (diffInDays > 0) {
    return diffInDays === 1 ? 'hace 1 día' : `hace ${diffInDays} días`;
  } else if (diffInHours > 0) {
    return diffInHours === 1 ? 'hace 1 hora' : `hace ${diffInHours} horas`;
  } else if (diffInMinutes > 0) {
    return diffInMinutes === 1 ? 'hace 1 minuto' : `hace ${diffInMinutes} minutos`;
  } else {
    return 'Ahora mismo';
  }
};

const getCategoryStyling = (category: string) => {
  const categoryLower = category?.toLowerCase() || '';
  
  if (categoryLower.includes('inmigración') || categoryLower.includes('visa')) {
    return {
      gradient: 'from-blue-500 to-indigo-600',
      icon: '🛂',
      bgColor: 'bg-blue-50',
      textColor: 'text-blue-700',
      borderColor: 'border-blue-200'
    };
  } else if (categoryLower.includes('negocio') || categoryLower.includes('empresa')) {
    return {
      gradient: 'from-green-500 to-emerald-600',
      icon: '💼',
      bgColor: 'bg-green-50',
      textColor: 'text-green-700',
      borderColor: 'border-green-200'
    };
  } else if (categoryLower.includes('estilo de vida') || categoryLower.includes('vida')) {
    return {
      gradient: 'from-purple-500 to-pink-600',
      icon: '🏠',
      bgColor: 'bg-purple-50',
      textColor: 'text-purple-700',
      borderColor: 'border-purple-200'
    };
  } else if (categoryLower.includes('legal') || categoryLower.includes('ley')) {
    return {
      gradient: 'from-orange-500 to-red-600',
      icon: '⚖️',
      bgColor: 'bg-orange-50',
      textColor: 'text-orange-700',
      borderColor: 'border-orange-200'
    };
  } else if (categoryLower.includes('impuestos') || categoryLower.includes('finanzas')) {
    return {
      gradient: 'from-teal-500 to-cyan-600',
      icon: '💰',
      bgColor: 'bg-teal-50',
      textColor: 'text-teal-700',
      borderColor: 'border-teal-200'
    };
  } else {
    return {
      gradient: 'from-slate-500 to-gray-600',
      icon: '📄',
      bgColor: 'bg-slate-50',
      textColor: 'text-slate-700',
      borderColor: 'border-slate-200'
    };
  }
};

const generateGradient = (text: string): string => {
  const gradients = [
    'from-blue-500 to-indigo-600',
    'from-green-500 to-emerald-600',
    'from-purple-500 to-pink-600',
    'from-orange-500 to-red-600',
    'from-teal-500 to-cyan-600',
    'from-slate-500 to-gray-600'
  ];
  
  let hash = 0;
  for (let i = 0; i < text.length; i++) {
    const char = text.charCodeAt(i);
    hash = ((hash << 5) - hash) + char;
    hash = hash & hash; // Convert to 32-bit integer
  }
  
  const index = Math.abs(hash) % gradients.length;
  return gradients[index];
};

// For server mode, we don't use getStaticPaths
// Instead, we fetch the post data in the component

// Get the slug from the URL parameters
const { slug } = Astro.params;

if (!slug) {
  return Astro.redirect('/es/blog');
}

// Fetch the post data from Supabase using the slug
let post;
try {
  post = await getBlogPostBySlug(slug, lang);
} catch (error) {
  console.error('Error fetching blog post:', error);
  return Astro.redirect('/es/blog');
}

if (!post) {
  return Astro.redirect('/es/blog');
}

// Type assertion for post
const typedPost = post as {
  id: string;
  title: string;
  slug: string;
  description: string;
  content: string;
  category: string;
  image?: string;
  lang: string;
  published: boolean;
  featured: boolean;
  author: string;
  pub_date: string;
  last_edited: string;
  reading_time?: number;
  tags?: string[];
};

const textContent = {
  en: {
    backToBlog: 'Back to Blog',
    publishedOn: 'Published on',
    updatedOn: 'Updated on',
    readingTime: 'min read',
    by: 'by',
    shareThisPost: 'Share this post',
    relatedPosts: 'Related Posts',
    noRelatedPosts: 'No related posts found.',
    error: 'Post not found'
  },
  es: {
    backToBlog: 'Volver al Blog',
    publishedOn: 'Publicado el',
    updatedOn: 'Actualizado el',
    readingTime: 'min de lectura',
    by: 'por',
    shareThisPost: 'Compartir esta publicación',
    relatedPosts: 'Publicaciones Relacionadas',
    noRelatedPosts: 'No se encontraron publicaciones relacionadas.',
    error: 'Publicación no encontrada'
  }
};

const content = textContent[lang as keyof typeof textContent] || textContent.es;

// Get related posts
let relatedPosts = [];
try {
  const allPosts = await getBlogPostsFromSupabase(lang, { limit: 20 });
  relatedPosts = allPosts
    .filter((p: any) => p.id !== typedPost.id && p.category === typedPost.category)
    .slice(0, 3);
} catch (error) {
  console.error('Error fetching related posts:', error);
}

const categoryStyling = getCategoryStyling(typedPost.category);
const gradientClass = typedPost.image ? generateGradient(typedPost.title) : categoryStyling.gradient;

// Calculate reading time if not provided
const readingTime = typedPost.reading_time || Math.ceil((typedPost.content || '').split(' ').length / 200);

// Format dates
const publishedDate = formatDate(typedPost.pub_date);
const updatedDate = formatDate(typedPost.last_edited);
---

<BlogPostLayoutNew
  title={typedPost.title}
  description={typedPost.description}
  lang={lang}
  cover={typedPost.image ? { url: typedPost.image } : null}
  timeToRead={readingTime}
  lastEdited={typedPost.last_edited}
  author={typedPost.author}
  publishedDate={typedPost.pub_date}
  structuredData={{
    "@context": "https://schema.org",
    "@type": "BlogPosting",
    "headline": typedPost.title,
    "description": typedPost.description,
    "author": {
      "@type": "Person",
      "name": typedPost.author
    },
    "datePublished": typedPost.pub_date,
    "dateModified": typedPost.last_edited,
    "publisher": {
      "@type": "Organization",
      "name": "Capital EME",
      "logo": {
        "@type": "ImageObject",
        "url": "https://www.capitaleme.com/icons/isotipo-color.svg"
      }
    },
    "mainEntityOfPage": {
      "@type": "WebPage",
      "@id": `https://www.capitaleme.com/es/blog/${typedPost.slug}`
    }
  }}
>
  <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
    <!-- Breadcrumb -->
    <nav class="mb-8">
      <ol class="flex items-center space-x-2 text-sm text-gray-500">
        <li><a href="/es" class="hover:text-blue-600 transition-colors">Inicio</a></li>
        <li><span class="mx-2">/</span></li>
        <li><a href="/es/blog" class="hover:text-blue-600 transition-colors">{content.backToBlog}</a></li>
        <li><span class="mx-2">/</span></li>
        <li class="text-gray-900 font-medium">{typedPost.title}</li>
      </ol>
    </nav>

    <!-- Article Header -->
    <header class="mb-12">
      <div class="mb-6">
        <span class={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${categoryStyling.bgColor} ${categoryStyling.textColor} ${categoryStyling.borderColor} border`}>
          {categoryStyling.icon} {typedPost.category}
        </span>
      </div>
      
      <h1 class="text-4xl md:text-5xl font-bold text-gray-900 mb-6 leading-tight">
        {typedPost.title}
      </h1>
      
      <p class="text-xl text-gray-600 mb-8 leading-relaxed">
        {typedPost.description}
      </p>
      
      <div class="flex flex-wrap items-center gap-6 text-sm text-gray-500">
        <div class="flex items-center">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4 mr-2">
            <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 6a3.75 3.75 0 1 1-7.5 0 3.75 3.75 0 0 1 7.5 0ZM4.501 20.118a7.5 7.5 0 0 1 14.998 0A17.933 17.933 0 0 1 12 21.75c-2.676 0-5.216-.584-7.499-1.632Z" />
          </svg>
          <span>{content.by} {typedPost.author}</span>
        </div>
        
        <div class="flex items-center">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4 mr-2">
            <path stroke-linecap="round" stroke-linejoin="round" d="M6.75 3v2.25M17.25 3v2.25M3 18.75V7.5a2.25 2.25 0 0 1 2.25-2.25h13.5A2.25 2.25 0 0 1 21 7.5v11.25m-18 0A2.25 2.25 0 0 0 5.25 21h13.5A2.25 2.25 0 0 0 21 18.75m-18 0v-1.5c0-.621.504-1.125 1.125-1.125h9.75c.621 0 1.125.504 1.125 1.125v1.5" />
          </svg>
          <span>{content.publishedOn} {publishedDate}</span>
        </div>
        
        <div class="flex items-center">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4 mr-2">
            <path stroke-linecap="round" stroke-linejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
          </svg>
          <span>{readingTime} {content.readingTime}</span>
        </div>
        
        {typedPost.last_edited !== typedPost.pub_date && (
          <div class="flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4 mr-2">
              <path stroke-linecap="round" stroke-linejoin="round" d="M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0 3.181 3.183a8.25 8.25 0 0 0 13.803-3.7M4.031 9.865a8.25 8.25 0 0 1 13.803-3.7l3.181 3.182m0-4.991v4.99" />
            </svg>
            <span>{content.updatedOn} {updatedDate}</span>
          </div>
        )}
      </div>
    </header>

    <!-- Article Content -->
    <article class="prose prose-lg max-w-none mb-12">
      <div set:html={typedPost.content}></div>
    </article>

    <!-- Social Sharing -->
    <div class="border-t border-gray-200 pt-8 mb-12">
      <div class="flex items-center justify-between">
        <h3 class="text-lg font-semibold text-gray-900">{content.shareThisPost}</h3>
        <SocialSharing 
          title={typedPost.title}
          description={typedPost.description}
          url={`https://www.capitaleme.com/es/blog/${typedPost.slug}`}
        />
      </div>
    </div>

    <!-- Related Posts -->
    {relatedPosts.length > 0 && (
      <section class="border-t border-gray-200 pt-8">
        <h2 class="text-2xl font-bold text-gray-900 mb-8">{content.relatedPosts}</h2>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
          {relatedPosts.map((relatedPost: any) => (
            <article class="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow">
              <div class="p-6">
                <span class={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${getCategoryStyling(relatedPost.category).bgColor} ${getCategoryStyling(relatedPost.category).textColor}`}>
                  {getCategoryStyling(relatedPost.category).icon} {relatedPost.category}
                </span>
                <h3 class="text-lg font-semibold text-gray-900 mt-3 mb-2 line-clamp-2">
                  <a href={`/es/blog/${relatedPost.slug}`} class="hover:text-blue-600 transition-colors">
                    {relatedPost.title}
                  </a>
                </h3>
                <p class="text-gray-600 text-sm line-clamp-3 mb-4">
                  {relatedPost.description}
                </p>
                <div class="flex items-center justify-between text-xs text-gray-500">
                  <span>{relatedPost.author}</span>
                  <span>{getRelativeTime(relatedPost.pub_date)}</span>
                </div>
              </div>
            </article>
          ))}
        </div>
      </section>
    )}
  </div>
</BlogPostLayoutNew> 