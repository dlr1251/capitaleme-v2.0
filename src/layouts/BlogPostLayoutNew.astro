---
import Layout from './Layout.astro';
import TableOfContents from '../components/core/navigation/TableOfContents.astro';
import { getAllContentData } from '../server/lib/contentData.js';
import { getBlogPostsFromSupabase } from '../lib/blogData.ts';

export interface Props {
  title: string;
  description?: string;
  lang?: string;
  pathname?: string;
  cover?: any;
  headings?: any[];
  timeToRead?: number;
  lastEdited?: string;
  currentUrl?: string;
  imageUrl?: string;
  structuredData?: any;
  author?: string;
  siteName?: string;
  publishedDate?: string;
}

const { 
  title, 
  description, 
  lang = 'en', 
  pathname,
  cover,
  headings = [],
  timeToRead = 5,
  lastEdited,
  currentUrl,
  imageUrl,
  structuredData,
  author = 'Capital M Law',
  siteName = 'Capital M Law',
  publishedDate
} = Astro.props;

// Get optimized menu data
const menuData = await getAllContentData(lang);

// Get blog posts for sidebar navigation
let blogPosts = [];
try {
  blogPosts = await getBlogPostsFromSupabase(lang, { limit: 50 });
  // Sort by publication date (newest first)
  blogPosts.sort((a: any, b: any) => new Date(b.pub_date).getTime() - new Date(a.pub_date).getTime());
} catch (error) {
  console.error('Error fetching blog posts for sidebar:', error);
}

const url = Astro.url;
const hasHeadings = headings && headings.length > 0;

// Get relative time function
const getRelativeTime = (dateString: string): string => {
  const date = new Date(dateString);
  const now = new Date();
  const diffInMs = now.getTime() - date.getTime();
  const diffInDays = Math.floor(diffInMs / (1000 * 60 * 60 * 24));
  const diffInHours = Math.floor(diffInMs / (1000 * 60 * 60));
  const diffInMinutes = Math.floor(diffInMs / (1000 * 60));

  if (diffInDays > 0) {
    return diffInDays === 1 ? '1 day ago' : `${diffInDays} days ago`;
  } else if (diffInHours > 0) {
    return diffInHours === 1 ? '1 hour ago' : `${diffInHours} hours ago`;
  } else if (diffInMinutes > 0) {
    return diffInMinutes === 1 ? '1 minute ago' : `${diffInMinutes} minutes ago`;
  } else {
    return 'Just now';
  }
};

// Get category styling
const getCategoryStyling = (category: string) => {
  const categoryLower = category?.toLowerCase() || '';
  
  if (categoryLower.includes('immigration') || categoryLower.includes('visa')) {
    return {
      bgColor: 'bg-blue-50',
      textColor: 'text-blue-700',
      borderColor: 'border-blue-200'
    };
  } else if (categoryLower.includes('business') || categoryLower.includes('company')) {
    return {
      bgColor: 'bg-green-50',
      textColor: 'text-green-700',
      borderColor: 'border-green-200'
    };
  } else if (categoryLower.includes('lifestyle') || categoryLower.includes('life')) {
    return {
      bgColor: 'bg-purple-50',
      textColor: 'text-purple-700',
      borderColor: 'border-purple-200'
    };
  } else if (categoryLower.includes('legal') || categoryLower.includes('law')) {
    return {
      bgColor: 'bg-orange-50',
      textColor: 'text-orange-700',
      borderColor: 'border-orange-200'
    };
  } else if (categoryLower.includes('taxes') || categoryLower.includes('finance')) {
    return {
      bgColor: 'bg-teal-50',
      textColor: 'text-teal-700',
      borderColor: 'border-teal-200'
    };
  } else {
    return {
      bgColor: 'bg-slate-50',
      textColor: 'text-slate-700',
      borderColor: 'border-slate-200'
    };
  }
};

import { ClientRouter } from "astro:transitions";

// Custom breadcrumbs for blog posts
const customBreadcrumbs = [
  { label: 'News', href: `/${lang}/blog2` },
  { label: title }
];
---

<Layout title={title} description={description} lang={lang as 'en' | 'es'} pathname={pathname} menuData={menuData}>
  <div class="bg-white">
    <!-- Hero Section -->
    <div class="relative bg-gradient-to-br from-gray-50 to-gray-100 py-16">
      <div class="max-w-4xl mx-auto px-6">
        <div class="text-center">
          <h1 class="text-4xl md:text-5xl font-bold text-gray-900 mb-6 leading-tight">
            {title}
          </h1>
          {description && (
            <p class="text-xl text-gray-600 mb-8 max-w-3xl mx-auto leading-relaxed">
              {description}
            </p>
          )}
          
          <!-- Meta Information -->
          <div class="flex flex-wrap items-center justify-center gap-6 text-sm text-gray-500 mb-8">
            {author && (
              <div class="flex items-center gap-2">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
                </svg>
                <span>{author}</span>
              </div>
            )}
            {publishedDate && (
              <div class="flex items-center gap-2">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3a2 2 0 012-2h4a2 2 0 012 2v4m-6 0h6m-6 0H8m0 0v4m0-4H6a2 2 0 00-2 2v8a2 2 0 002 2h12a2 2 0 002-2V9a2 2 0 00-2-2H8z"/>
                </svg>
                <time datetime={publishedDate}>
                  {new Date(publishedDate).toLocaleDateString(lang === 'en' ? 'en-US' : 'es-ES', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                  })}
                </time>
              </div>
            )}
            <div class="flex items-center gap-2">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
              </svg>
              <span>{timeToRead} {lang === 'en' ? 'min read' : 'min de lectura'}</span>
            </div>
            {lastEdited && (
              <div class="flex items-center gap-2">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
                </svg>
                <span>{lang === 'en' ? 'Updated' : 'Actualizado'}: {new Date(lastEdited).toLocaleDateString()}</span>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>

    <!-- Content Section with Sidebar and TOC -->
    <div class="max-w-screen-2xl mx-auto px-4 sm:px-6 lg:px-8 mt-[74px]">
      <div class="flex gap-8">
        <!-- Left Navigation Panel -->
        <aside class="hidden lg:block w-80 shrink-0">
          <div class="sticky top-32">
            <nav class="space-y-6">
              <!-- Header -->
              <div class="pb-4 border-b border-gray-200">
                <h2 class="text-lg font-bold text-gray-900 mb-2">üì∞ {lang === 'es' ? 'Blog' : 'Blog'}</h2>
                <p class="text-sm text-gray-600">{lang === 'es' ? 'Art√≠culos y noticias' : 'Articles and news'}</p>
              </div>

              <!-- Blog Posts Navigation -->
              {blogPosts.length > 0 && (
                <div class="space-y-2">
                  <h3 class="text-sm font-semibold text-gray-900 uppercase tracking-wide">
                    {lang === 'es' ? 'Art√≠culos Recientes' : 'Recent Articles'}
                  </h3>
                  <div class="space-y-1 max-h-96 overflow-y-auto">
                    {blogPosts.slice(0, 15).map((post: any) => {
                      const categoryStyling = getCategoryStyling(post.category);
                      return (
                        <a
                          href={`/${lang}/blog/${post.slug}`}
                          class={`block px-3 py-2 text-sm rounded-md transition-all duration-200 ${
                            post.slug === Astro.params.slug
                              ? 'bg-blue-50 text-blue-700 border-l-4 border-blue-500'
                              : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900 border-l-4 border-transparent'
                          }`}
                        >
                          <div class="font-medium line-clamp-2">{post.title}</div>
                          {post.category && (
                            <div class={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium mt-1 ${categoryStyling.bgColor} ${categoryStyling.textColor}`}>
                              {post.category}
                            </div>
                          )}
                          <div class="text-xs text-gray-500 mt-1">
                            {getRelativeTime(post.pub_date)}
                          </div>
                        </a>
                      );
                    })}
                  </div>
                </div>
              )}

              <!-- Quick Links -->
              <div class="pt-4 border-t border-gray-200">
                <h3 class="text-sm font-semibold text-gray-900 mb-3">
                  {lang === 'es' ? 'Enlaces R√°pidos' : 'Quick Links'}
                </h3>
                <div class="space-y-2">
                  <a href={`/${lang}/blog`} class="flex items-center px-3 py-2 text-sm text-gray-600 hover:bg-gray-50 hover:text-gray-900 rounded-md transition-colors">
                    <span class="mr-2">üè†</span>
                    {lang === 'es' ? 'Inicio Blog' : 'Blog Home'}
                  </a>
                  <a href={`/${lang}/contact`} class="flex items-center px-3 py-2 text-sm text-gray-600 hover:bg-gray-50 hover:text-gray-900 rounded-md transition-colors">
                    <span class="mr-2">üìû</span>
                    {lang === 'es' ? 'Cont√°ctanos' : 'Contact Us'}
                  </a>
                  <a href={`/${lang}/visas`} class="flex items-center px-3 py-2 text-sm text-gray-600 hover:bg-gray-50 hover:text-gray-900 rounded-md transition-colors">
                    <span class="mr-2">üõÇ</span>
                    {lang === 'es' ? 'Visas' : 'Visas'}
                  </a>
                  <a href={`/${lang}/guides`} class="flex items-center px-3 py-2 text-sm text-gray-600 hover:bg-gray-50 hover:text-gray-900 rounded-md transition-colors">
                    <span class="mr-2">üìö</span>
                    {lang === 'es' ? 'Gu√≠as' : 'Guides'}
                  </a>
                  <a href={`/${lang}/clkr`} class="flex items-center px-3 py-2 text-sm text-gray-600 hover:bg-gray-50 hover:text-gray-900 rounded-md transition-colors">
                    <span class="mr-2">‚öñÔ∏è</span>
                    {lang === 'es' ? 'CLKR' : 'CLKR'}
                  </a>
                </div>
              </div>
            </nav>
          </div>
        </aside>

        <!-- Main Content -->
        <article class="flex-1 min-w-0">
          <div class="prose prose-lg max-w-none prose-headings:scroll-mt-20">
            <slot />
          </div>
        </article>

        <!-- Right Table of Contents -->
        {hasHeadings && (
          <aside class="hidden xl:block w-80 shrink-0">
            <div class="sticky top-32">
              <TableOfContents headings={headings} lang={lang} />
            </div>
          </aside>
        )}
      </div>
    </div>
  </div>
</Layout>

<script is:inline src="https://cdn.jsdelivr.net/npm/flowbite@3.0.0/dist/flowbite.min.js"></script>

<script>
  // Reading progress spinner
  function updateReadingProgress() {
    const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
    const docHeight = document.documentElement.scrollHeight - window.innerHeight;
    const scrollPercent = Math.min(100, (scrollTop / docHeight) * 100);
    
    const progressPath = document.getElementById('progress-path');
    const progressText = document.getElementById('progress-text');
    
    if (progressPath && progressText) {
      const circumference = 2 * Math.PI * 15.9155; // Based on the SVG radius
      const offset = circumference - (scrollPercent / 100) * circumference;
      
      progressPath.style.strokeDasharray = `${circumference} ${circumference}`;
      progressPath.style.strokeDashoffset = offset.toString();
      progressText.textContent = Math.round(scrollPercent).toString() + '%';
    }
  }

  // Initialize everything
  document.addEventListener('DOMContentLoaded', () => {
    window.addEventListener('scroll', () => {
      updateReadingProgress();
    });
  });
</script>

<style>
  /* Custom scrollbar for sidebar */
  .overflow-y-auto::-webkit-scrollbar {
    width: 6px;
  }
  
  .overflow-y-auto::-webkit-scrollbar-track {
    background: #f1f5f9;
    border-radius: 3px;
  }
  
  .overflow-y-auto::-webkit-scrollbar-thumb {
    background: #cbd5e1;
    border-radius: 3px;
  }
  
  .overflow-y-auto::-webkit-scrollbar-thumb:hover {
    background: #94a3b8;
  }
  
  /* Smooth transitions */
  .transition-all {
    transition: all 0.2s ease-in-out;
  }
  
  /* Custom prose styles */
  .prose h2 {
    scroll-margin-top: 120px;
  }
  
  .prose h3 {
    scroll-margin-top: 120px;
  }
  
  .prose h4 {
    scroll-margin-top: 120px;
  }
  
  /* Line clamp utility */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style> 